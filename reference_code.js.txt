const apikey = "c84e886891014383bcf608423555b0ba";
const basemapVTURL = "https://api.hkmapservice.gov.hk/ags/map/basemap/VT/WGS84/resources/styles/root.json"
const labels = [{
    id: "cb_en",
    url: "https://api.hkmapservice.gov.hk/ags/map/label-en/VT/WGS84/resources/styles/root.json",
  },
  {
    id: "cb_tc",
    url: "https://api.hkmapservice.gov.hk/ags/map/label-tc/VT/WGS84/resources/styles/root.json",
  },
  {
    id: "cb_sc",
    url: "https://api.hkmapservice.gov.hk/ags/map/label-sc/VT/WGS84/resources/styles/root.json"
  }
];


let vectorStyleJson;
const styleLayerIds = {
  "Building": [
    "Lv13/10_BLDGPOLY_50K/BLD",
    "Lv13/10_BLDGPOLY_50K/CGA/0",
    "Lv13/10_BLDGPOLY_50K/CGA/1",
    "Lv13/10_BLDGPOLY_50K/CGA/2",
    "Lv14/12_BLDGPOLY_50K/BLD",
    "Lv14/12_BLDGPOLY_50K/CGA/0",
    "Lv14/12_BLDGPOLY_50K/CGA/1",
    "Lv14/12_BLDGPOLY_50K/CGA/2",
    "Lv15/14_BLDGPOLY_10K/BLD-1",
    "Lv15/14_BLDGPOLY_10K/CGA-1/0",
    "Lv15/14_BLDGPOLY_10K/CGA-1/1",
    "Lv15/14_BLDGPOLY_10K/CGA-1/2",
    "Lv15/14_BLDGPOLY_10K/POD-1",
    "Lv16/18_BLDGPOLY_10K/BLD-1",
    "Lv16/18_BLDGPOLY_10K/CGA-1/0",
    "Lv16/18_BLDGPOLY_10K/CGA-1/1",
    "Lv16/18_BLDGPOLY_10K/CGA-1/2",
    "Lv16/18_BLDGPOLY_10K/POD-1",
    "Lv17-Lv18/18_BuildingLine_5K/OG, DUM",
    "Lv17-Lv18/18_BuildingLine_5K/OG, FEN; US, FEN/0",
    "Lv17-Lv18/18_BuildingLine_5K/OG, FEN; US, FEN/1",
    "Lv17-Lv18/18_BuildingLine_5K/OG, FEN; US, FEN/2",
    "Lv17-Lv18/18_BuildingLine_5K/OG, OSL; US, OSL",
    "Lv17-Lv18/18_BuildingLine_5K/OG, PDL",
    "Lv17-Lv18/18_BuildingLine_5K/OG, WLL; US, WLL/0",
    "Lv17-Lv18/18_BuildingLine_5K/OG, WLL; US, WLL/1",
    "Lv17-Lv18/19_BuildingPoly_5K/OG, CON; OG, CGA; OG, CHN",
    "Lv17-Lv18/19_BuildingPoly_5K/OG, CSN",
    "Lv17-Lv18/19_BuildingPoly_5K/OG, OSS/0",
    "Lv17-Lv18/19_BuildingPoly_5K/OG, OSS/2",
    "Lv17-Lv18/19_BuildingPoly_5K/OG, POD",
    "Lv17-Lv18/19_BuildingPoly_5K/OG, RUI/0",
    "Lv17-Lv18/19_BuildingPoly_5K/OG, USN",
    "Lv17-Lv18/21_BuildingPoly_5K/US, POD",
    "Lv17-Lv18/29_BuildingPoly_5K/OG, WIP/0",
    "Lv17-Lv18/29_BuildingPoly_5K/US, CHN; US, CGA",
    "Lv17-Lv18/29_BuildingPoly_5K/US, CSN; US, BLD",
    "Lv17-Lv18/29_BuildingPoly_5K/US, OSS/0",
    "Lv17-Lv18/29_BuildingPoly_5K/US, OSS/2",
    "Lv17-Lv18/29_BuildingPoly_5K/US, USN",
    "Lv17-Lv18/29_BuildingPoly_5K/US, WIP/0",
    "Lv17-Lv18/5_BuildingLine_5K/AS, FEN/0",
    "Lv17-Lv18/5_BuildingLine_5K/AS, FEN/1",
    "Lv17-Lv18/5_BuildingLine_5K/AS, OSL",
    "Lv17-Lv18/5_BuildingLine_5K/AS, WLL/0",
    "Lv17-Lv18/5_BuildingLine_5K/AS, WLL/1",
    "Lv17-Lv18/6_BuildingPoly_5K/AS, BLD; AS, CSN",
    "Lv17-Lv18/6_BuildingPoly_5K/AS, CON; AS, CGA; AS, CHN",
    "Lv17-Lv18/6_BuildingPoly_5K/AS, OSS/0",
    "Lv17-Lv18/6_BuildingPoly_5K/AS, OSS/2",
    "Lv17-Lv18/6_BuildingPoly_5K/AS, POD",
    "Lv17-Lv18/6_BuildingPoly_5K/AS, USN",
    "Lv17-Lv18/6_BuildingPoly_5K/AS, WIP",
    "Lv17-Lv18/6_BuildingPoly_5K/OG, BLD",
    "Lv19-Lv20/18_CartoBuildingLine_1K/BP, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/BP, P",
    "Lv19-Lv20/18_CartoBuildingLine_1K/BUP, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/CHL, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/F, E/0",
    "Lv19-Lv20/18_CartoBuildingLine_1K/F, E/1",
    "Lv19-Lv20/18_CartoBuildingLine_1K/F, E/2",
    "Lv19-Lv20/18_CartoBuildingLine_1K/FIR, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/FRB, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/OS, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/OSP, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/PDL, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/PDP, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/PDP, P",
    "Lv19-Lv20/18_CartoBuildingLine_1K/PEC, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/PUP, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/PUP, P",
    "Lv19-Lv20/18_CartoBuildingLine_1K/PV, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/PWP, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/PWP, P",
    "Lv19-Lv20/18_CartoBuildingLine_1K/RU, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/TS, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/TSP, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/WH, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/WIP, E",
    "Lv19-Lv20/18_CartoBuildingLine_1K/WL, E/0",
    "Lv19-Lv20/18_CartoBuildingLine_1K/WL, E/1",
    "Lv19-Lv20/2_BuiltStructurePoint_1K",
    "Lv19-Lv20/2_BuiltStructurePoint_1K/BUU, E",
    "Lv19-Lv20/2_BuiltStructurePoint_1K/GIC, E",
    "Lv19-Lv20/2_BuiltStructurePoint_1K/GRA, E",
    "Lv19-Lv20/22_BuiltStructurePolygon_1K/SWP; FOU",
    "Lv19-Lv20/22_BuiltStructurePolygon_1K/TEC; FOF; BAC",
    "Lv19-Lv20/25_Building_1K/Building Block",
    "Lv19-Lv20/26_Building(POD)_1K/Podium Block",
    "Lv19-Lv20/27_Building(BLD)_L19_1K/Building Block",
    "Lv19-Lv20/28_Building(BLD,OS,TS)_1K/Building Block",
    "Lv19-Lv20/28_Building(BLD,OS,TS)_1K/Open-sided Structure",
    "Lv19-Lv20/28_Building(BLD,OS,TS)_1K/Temporary Structure",
    "Lv19-Lv20/29_Building(POD)_1K/Podium Block",
    "Lv19-Lv20/33_Building(OS,TS)_1K/Open-sided Structure",
    "Lv19-Lv20/33_Building(OS,TS)_1K/Temporary Structure",
    "Lv19-Lv20/6_BuildingAccessoryLine_1K/BA",
    "Lv19-Lv20/6_BuildingAccessoryLine_1K/CA",
    "Lv19-Lv20/6_BuildingAccessoryLine_1K/OH",
    "Lv19-Lv20/6_BuildingAccessoryLine_1K/UN",
    "Lv19-Lv20/7_CartoBuildingLine_1K",
    "LV7-LV12/9_BLDGPOLY_200K"
  ],
  "Road": [
    "Lv13/5_Road/5_1_Expressway_Elevated/TSPTLINE_50K:3",
    "Lv13/5_Road/5_1_RoadCasing_Elevated/TSPTLINE_50K:28",
    "Lv13/5_Road/5_1_RoadCasing_Elevated/TSPTLINE_50K:5",
    "Lv13/5_Road/5_1_RoadFilling_Elevated/TSPTLINE_50K:1",
    "Lv13/5_Road/5_1_RoadFilling_Elevated/TSPTLINE_50K:2",
    "Lv13/5_Road/5_2_Expressway_Elevated/TSPTLINE_50K:46",
    "Lv13/5_Road/5_2_RoadCasing_Elevated/TSPTLINE_50K:42",
    "Lv13/5_Road/5_2_RoadCasing_Elevated/TSPTLINE_50K:43",
    "Lv13/5_Road/5_2_RoadFilling_Elevated/TSPTLINE_50K:44",
    "Lv13/5_Road/5_2_RoadFilling_Elevated/TSPTLINE_50K:45",
    "Lv13/5_Road/5_3_Expressway/TSPTLINE_50K:16",
    "Lv13/5_Road/5_3_RoadCasing/TSPTLINE_50K:38",
    "Lv13/5_Road/5_3_RoadCasing/TSPTLINE_50K:39",
    "Lv13/5_Road/5_3_RoadFilling/TSPTLINE_50K:40",
    "Lv13/5_Road/5_3_RoadFilling/TSPTLINE_50K:41",
    "Lv13/6_Tunnel/TSPTLINE_50K:36",
    "Lv13/6_Tunnel/TSPTLINE_50K:37",
    "Lv13/7_Runway/TSPTLINE_50K:35",
    "Lv13/8_Main Road(MRD-2,MRD-3)/TSPTLINE_50K:33",
    "Lv13/8_Main Road(MRD-2,MRD-3)/TSPTLINE_50K:34",
    "Lv13/9_Secondary Road(SRD-2,SRD-3)/TSPTLINE_50K:31",
    "Lv13/9_Secondary Road(SRD-2,SRD-3)/TSPTLINE_50K:32",
    "Lv14/10_Main Road(MRD-2,MRD-3)/TSPTLINE_50K:7",
    "Lv14/10_Main Road(MRD-2,MRD-3)/TSPTLINE_50K:8",
    "Lv14/11_Secondary Road(SRD-2,SRD-3)/TSPTLINE_50K:14",
    "Lv14/11_Secondary Road(SRD-2,SRD-3)/TSPTLINE_50K:6",
    "Lv14/13_TSPTLINE_50K/FPI-1",
    "Lv14/13_TSPTLINE_50K/TAL-1",
    "Lv14/7_Road/7_1_RoadCasing_Elevated/TSPTLINE_50K:24",
    "Lv14/7_Road/7_1_RoadCasing_Elevated/TSPTLINE_50K:25",
    "Lv14/7_Road/7_1_RoadFilling_Elevated/TSPTLINE_50K:26",
    "Lv14/7_Road/7_1_RoadFilling_Elevated/TSPTLINE_50K:27",
    "Lv14/7_Road/7_2_Expressway_Elevated/TSPTLINE_50K:23",
    "Lv14/7_Road/7_2_RoadCasing_Elevated/TSPTLINE_50K:19",
    "Lv14/7_Road/7_2_RoadCasing_Elevated/TSPTLINE_50K:20",
    "Lv14/7_Road/7_2_RoadFilling_Elevated/TSPTLINE_50K:21",
    "Lv14/7_Road/7_2_RoadFilling_Elevated/TSPTLINE_50K:22",
    "Lv14/7_Road/7_3_Expressway/TSPTLINE_50K:18",
    "Lv14/7_Road/7_3_RoadCasing/TSPTLINE_50K:12",
    "Lv14/7_Road/7_3_RoadCasing/TSPTLINE_50K:13",
    "Lv14/7_Road/7_3_RoadFilling/TSPTLINE_50K:15",
    "Lv14/7_Road/7_3_RoadFilling/TSPTLINE_50K:17",
    "Lv14/8_Tunnel/TSPTLINE_50K:10",
    "Lv14/8_Tunnel/TSPTLINE_50K:11",
    "Lv14/9_Runway/TSPTLINE_50K:9",
    "Lv15/10_TSPTLINE_10K:1/EXP-2",
    "Lv15/10_TSPTLINE_10K:1/MRD-2",
    "Lv15/10_TSPTLINE_10K:1/MRD-4",
    "Lv15/10_TSPTLINE_10K:1/SRD-2",
    "Lv15/10_TSPTLINE_10K:1/SRD-4",
    "Lv15/10_TSPTLINE_10K:1/TUN-2",
    "Lv15/11_TSPTLINE_10K:1/TAL-1; FPI-1",
    "Lv15/15_TSPTPOLY_10K/EXP-2",
    "Lv15/15_TSPTPOLY_10K/MRD-2",
    "Lv15/15_TSPTPOLY_10K/SRD-2",
    "Lv15/18_PedNBikePoly_5K/OG, BRI",
    "Lv15/7_Tunnel/TSPTLINE_Tunnel_10K:2/TUN",
    "Lv15/8_TSPTLINE_10K/EXP",
    "Lv15/8_TSPTLINE_10K/MRD",
    "Lv15/8_TSPTLINE_10K/NRD",
    "Lv15/8_TSPTLINE_10K/RBR",
    "Lv15/8_TSPTLINE_10K/SRD",
    "Lv15/8_TSPTLINE_10K/SRS",
    "Lv15/8_TSPTLINE_10K/TIP",
    "Lv15/8_TSPTLINE_10K/URD",
    "Lv15/9_TSPTPOLY_10K/EXP-1",
    "Lv15/9_TSPTPOLY_10K/MRD-1",
    "Lv15/9_TSPTPOLY_10K/NRD-1",
    "Lv15/9_TSPTPOLY_10K/PTI-1",
    "Lv15/9_TSPTPOLY_10K/RBR-1",
    "Lv15/9_TSPTPOLY_10K/RUL-1",
    "Lv15/9_TSPTPOLY_10K/SRD-1",
    "Lv15/9_TSPTPOLY_10K/SRS-1",
    "Lv15/9_TSPTPOLY_10K/TIP-1",
    "Lv16/10_TSPTLINE_10K:2/CCR, Active; LRT, Active; PKT, Active; TRM, Active/0",
    "Lv16/10_TSPTLINE_10K:2/CCR, Active; LRT, Active; PKT, Active; TRM, Active/1",
    "Lv16/10_TSPTLINE_10K:2/CCR, WIP; CCR, Proposed; PKT, Proposed; PKT, WIP; LRT, Proposed; LRT, WIP; TRM, WIP; TRM, Proposed",
    "Lv16/10_TSPTLINE_10K:2/RDD, Active",
    "Lv16/11_TSPTLINE_10K:2/EXP",
    "Lv16/11_TSPTLINE_10K:2/MRD",
    "Lv16/11_TSPTLINE_10K:2/NRD",
    "Lv16/11_TSPTLINE_10K:2/RBR",
    "Lv16/11_TSPTLINE_10K:2/SRD",
    "Lv16/11_TSPTLINE_10K:2/SRS",
    "Lv16/11_TSPTLINE_10K:2/TIP",
    "Lv16/11_TSPTLINE_10K:2/URD",
    "Lv16/12_TSPTLINE_10K/EXP-2",
    "Lv16/12_TSPTLINE_10K/MRD-2",
    "Lv16/12_TSPTLINE_10K/MRD-4",
    "Lv16/12_TSPTLINE_10K/SRD-2",
    "Lv16/12_TSPTLINE_10K/SRD-4",
    "Lv16/12_TSPTLINE_10K/TUN-2",
    "Lv16/13_TSPTPOLY_10K/EXP-1",
    "Lv16/13_TSPTPOLY_10K/MRD-1",
    "Lv16/13_TSPTPOLY_10K/NRD-1",
    "Lv16/13_TSPTPOLY_10K/PTI-1",
    "Lv16/13_TSPTPOLY_10K/RBR-1",
    "Lv16/13_TSPTPOLY_10K/RUL-1",
    "Lv16/13_TSPTPOLY_10K/SRD-1",
    "Lv16/13_TSPTPOLY_10K/SRS-1",
    "Lv16/13_TSPTPOLY_10K/TIP-1",
    "Lv16/13_TSPTPOLY_10K/URD-1",
    "Lv16/14_TSPTLINE_10K/TAL-1; FPI-1",
    "Lv16/19_TSPTPOLY_10K/EXP-2",
    "Lv16/19_TSPTPOLY_10K/MRD-2",
    "Lv16/19_TSPTPOLY_10K/SRD-2",
    "Lv16/23_PedNBikePoly_5K:1/OG, BRI",
    "Lv16/9_PedNBikePoly_5K/Covered Walkway; Elevated Walkway; Footbridge",
    "Lv17-Lv18/12_PedNBikePoly_5K/Covered Walkway; Elevated Walkway; Footbridge",
    "Lv17-Lv18/14_PedNBikePoly_5K/AS, BTK",
    "Lv17-Lv18/15_RoadPoly_5K/Expressway",
    "Lv17-Lv18/15_RoadPoly_5K/MainRoad",
    "Lv17-Lv18/15_RoadPoly_5K/RoadFurniture",
    "Lv17-Lv18/15_RoadPoly_5K/SecondaryRoad",
    "Lv17-Lv18/15_RoadPoly_5K/SurfacedRoad",
    "Lv17-Lv18/15_RoadPoly_5K/UnsurfacedRoad",
    "Lv17-Lv18/17_ProposedRoadLine_5K/Proposed",
    "Lv17-Lv18/20_RoadPoly_5K/Expressway",
    "Lv17-Lv18/20_RoadPoly_5K/MainRoad",
    "Lv17-Lv18/20_RoadPoly_5K/RoadFurniture",
    "Lv17-Lv18/20_RoadPoly_5K/SecondaryRoad",
    "Lv17-Lv18/20_RoadPoly_5K/SurfacedRoad",
    "Lv17-Lv18/20_RoadPoly_5K/UnsurfacedRoad",
    "Lv17-Lv18/27_RoadLine_5K/OG, Expressway_Line, RDM; OG, Expressway_Line, RDD",
    "Lv17-Lv18/27_RoadLine_5K/OG, MainRoad_Line, RDD",
    "Lv17-Lv18/27_RoadLine_5K/OG, MainRoad_Line, RDM",
    "Lv17-Lv18/27_RoadLine_5K/OG, SecondaryRoad_Line, RDD; OG, SecondaryRoad_Line, RDM; OG, RoadFurniture_Line, TPO; OG, SurfacedRoad_Line, RDM; OG, RoadFurniture_Line, ROB",
    "Lv17-Lv18/27_RoadLine_5K/OG, SurfacedRoad_Line, RUN; OG, UnsurfacedRoad_Line, TRA; OG, SecondaryRoad_Line, TRA",
    "Lv17-Lv18/27_RoadLine_5K/UG, MainRoad_Line, TUN; UG, Expressway_Line, TUN",
    "Lv17-Lv18/27_RoadLine_5K/UG, SecondaryRoad_Line, TUN",
    "Lv17-Lv18/30_PedNBikePoly_5K/OG, BRI",
    "Lv17-Lv18/30_PedNBikePoly_5K/OG, BTK",
    "Lv17-Lv18/31_RoadPoly_5K/Expressway",
    "Lv17-Lv18/31_RoadPoly_5K/MainRoad",
    "Lv17-Lv18/31_RoadPoly_5K/RoadFurniture",
    "Lv17-Lv18/31_RoadPoly_5K/SecondaryRoad",
    "Lv17-Lv18/31_RoadPoly_5K/SurfacedRoad",
    "Lv17-Lv18/31_RoadPoly_5K/UnsurfacedRoad",
    "Lv17-Lv18/39_RoadLine_5K/Under Structure, Flyover, Expressway_Line; Under Structure, Road Divider, Expressway_Line; Under Structure, Road Margin, Expressway_Line; Underground, Underground Road, Expressway_Line",
    "Lv17-Lv18/39_RoadLine_5K/Under Structure, Flyover, MainRoad_Line; Under Structure, Road Divider, MainRoad_Line; Under Structure, Road Margin, MainRoad_Line; Under Structure, Tunnel, MainRoad_Line; Under Structure, Underground Road, MainRoad_Line; Underground, Underground Road, MainRoad_Line",
    "Lv17-Lv18/39_RoadLine_5K/Under Structure, Flyover, SecondaryRoad_Line; Under Structure, Road Bridge, RoadFurniture_Line; Under Structure, Road Divider, SecondaryRoad_Line; Under Structure, Road Margin, SecondaryRoad_Line; Under Structure, Road Margin, SurfacedRoad_Line",
    "Lv17-Lv18/39_RoadLine_5K/Under Structure, Track, UnsurfacedRoad_Line",
    "Lv17-Lv18/39_RoadLine_5K/Under Structure, Tunnel, SecondaryRoad_Line; Under Structure, Underground Road, SecondaryRoad_Line; Underground, Underground Road, SecondaryRoad_Line",
    "Lv17-Lv18/40_RoadPoly_5K/Expressway",
    "Lv17-Lv18/40_RoadPoly_5K/MainRoad",
    "Lv17-Lv18/40_RoadPoly_5K/RoadFurniture",
    "Lv17-Lv18/40_RoadPoly_5K/SecondaryRoad",
    "Lv17-Lv18/40_RoadPoly_5K/SurfacedRoad",
    "Lv17-Lv18/40_RoadPoly_5K/UnsurfacedRoad",
    "Lv17-Lv18/47_RoadPoly_5K/Expressway",
    "Lv17-Lv18/47_RoadPoly_5K/MainRoad",
    "Lv17-Lv18/47_RoadPoly_5K/RoadFurniture",
    "Lv17-Lv18/47_RoadPoly_5K/SecondaryRoad",
    "Lv17-Lv18/47_RoadPoly_5K/SurfacedRoad",
    "Lv17-Lv18/47_RoadPoly_5K/UnsurfacedRoad",
    "Lv17-Lv18/7_RoadLine_5K/Expressway_Line",
    "Lv17-Lv18/7_RoadLine_5K/MainRoad_Line",
    "Lv17-Lv18/7_RoadLine_5K/RoadFurniture_Line; SecondaryRoad_Line; SurfacedRoad_Line",
    "Lv17-Lv18/7_RoadLine_5K/UnsurfacedRoad_Line",
    "Lv19-Lv20/19_RoadPoly(FLY)_5K/Expressway, Flyover, Expressway",
    "Lv19-Lv20/19_RoadPoly(FLY)_5K/MainRoad, Flyover, MainRoad",
    "Lv19-Lv20/19_RoadPoly(FLY)_5K/SecondaryRoad, Flyover, SecondaryRoad",
    "Lv19-Lv20/20_RoadPoly(AS,ROD)_5K/Expressway",
    "Lv19-Lv20/20_RoadPoly(AS,ROD)_5K/MainRoad",
    "Lv19-Lv20/20_RoadPoly(AS,ROD)_5K/SecondaryRoad",
    "Lv19-Lv20/21_RoadPoly(AS,ROB)_5K/Expressway",
    "Lv19-Lv20/21_RoadPoly(AS,ROB)_5K/MainRoad",
    "Lv19-Lv20/21_RoadPoly(AS,ROB)_5K/RoadFurniture",
    "Lv19-Lv20/21_RoadPoly(AS,ROB)_5K/SecondaryRoad",
    "Lv19-Lv20/21_RoadPoly(AS,ROB)_5K/SurfacedRoad",
    "Lv19-Lv20/21_RoadPoly(AS,ROB)_5K/UnsurfacedRoad",
    "Lv19-Lv20/23_PedNBikePoly_5K:2/Covered Walkway; Elevated Walkway; Footbridge",
    "Lv19-Lv20/23_PedNBikePoly_5K:3/AS, BTK; OG, BRI; OG, BTK",
    "Lv19-Lv20/3_RoadAssetPoint_1K/BAC, E",
    "Lv19-Lv20/3_RoadAssetPoint_1K/RAC, E",
    "Lv19-Lv20/30_RoadPoly_5K/Expressway",
    "Lv19-Lv20/30_RoadPoly_5K/MainRoad",
    "Lv19-Lv20/31_RoadPoly(OG)_5K/Expressway",
    "Lv19-Lv20/31_RoadPoly(OG)_5K/MainRoad",
    "Lv19-Lv20/31_RoadPoly(OG)_5K/RoadFurniture",
    "Lv19-Lv20/31_RoadPoly(OG)_5K/SecondaryRoad",
    "Lv19-Lv20/31_RoadPoly(OG)_5K/SurfacedRoad",
    "Lv19-Lv20/31_RoadPoly(OG)_5K/UnsurfacedRoad",
    "Lv19-Lv20/32_RoadPoly(OG,ROB)_5K/Expressway",
    "Lv19-Lv20/32_RoadPoly(OG,ROB)_5K/MainRoad",
    "Lv19-Lv20/32_RoadPoly(OG,ROB)_5K/RoadFurniture",
    "Lv19-Lv20/32_RoadPoly(OG,ROB)_5K/SecondaryRoad",
    "Lv19-Lv20/32_RoadPoly(OG,ROB)_5K/SurfacedRoad",
    "Lv19-Lv20/32_RoadPoly(OG,ROB)_5K/UnsurfacedRoad",
    "Lv19-Lv20/34_PedNBikePoly_5K/AS, BTK; OG, BRI; OG, BTK",
    "Lv19-Lv20/41_RoadPoly(US)_5K/Expressway",
    "Lv19-Lv20/41_RoadPoly(US)_5K/MainRoad",
    "Lv19-Lv20/41_RoadPoly(US)_5K/RoadFurniture",
    "Lv19-Lv20/41_RoadPoly(US)_5K/SecondaryRoad",
    "Lv19-Lv20/41_RoadPoly(US)_5K/SurfacedRoad",
    "Lv19-Lv20/41_RoadPoly(US)_5K/UnsurfacedRoad",
    "LV7-LV12/3_Expressway/TSPTLINE_200K:10",
    "LV7-LV12/4_Main Road/TSPTLINE_200K:8",
    "LV7-LV12/4_Main Road/TSPTLINE_200K:9",
    "LV7-LV12/5_Secondary Road/TSPTLINE_200K:6",
    "LV7-LV12/5_Secondary Road/TSPTLINE_200K:7",
    "LV7-LV12/6_Runway/TSPTLINE_200K:5",
    "LV7-LV12/7_Main Road(MRD-2_MRD-3)/TSPTLINE_200K:3",
    "LV7-LV12/7_Main Road(MRD-2_MRD-3)/TSPTLINE_200K:4",
    "LV7-LV12/8_Secondary Road(SRD-2_SRD-3)/TSPTLINE_200K:1",
    "LV7-LV12/8_Secondary Road(SRD-2_SRD-3)/TSPTLINE_200K:2"
  ],
  "Railway": [
    "Lv13/1_Railway/TSPTLINE_50K:4",
    "Lv14/6_Railway/TSPTLINE_50K:30",
    "Lv15/0_MTR_POINT_10K:2",
    "Lv15/6_Railway/TSPTLINE_10K:1",
    "Lv15/6_Railway/TSPTPOLY_10K:2/HSS, Underground",
    "Lv15/6_Railway/TSPTPOLY_10K:2/MTS, Elevated, Over ",
    "Lv15/6_Railway/TSPTPOLY_10K:2/MTS, Underground",
    "Lv16/0_MTR_POINT_10K:3",
    "Lv16/7_Railway/TSPTLINE_10K:2",
    "Lv16/7_Railway/TSPTPOLY_10K:1/HSS, Underground",
    "Lv16/7_Railway/TSPTPOLY_10K:1/MTS, Elevated, Over",
    "Lv16/7_Railway/TSPTPOLY_10K:1/MTS, Underground",
    "Lv16/7_Railway/Tunnel/TSPTLINE_Tunnel_10K:1/TUN",
    "Lv17-Lv18/0_MTR_POINT_10K:1",
    "Lv17-Lv18/0_RailwayEntrance_5K:1",
    "Lv17-Lv18/10_RailPoly_5K/AS, UPT",
    "Lv17-Lv18/22_RailLine_5K/OG, LRT; OG, TRM; OG, CBC; OG, PKT/0",
    "Lv17-Lv18/22_RailLine_5K/OG, LRT; OG, TRM; OG, CBC; OG, PKT/1",
    "Lv17-Lv18/22_RailLine_5K/OG, MTR",
    "Lv17-Lv18/22_RailLine_5K/OG, RPL; OG, RTP",
    "Lv17-Lv18/23_RailPoly_5K/OG, CPT",
    "Lv17-Lv18/23_RailPoly_5K/OG, UPT",
    "Lv17-Lv18/32_BoulderLine_5K/BOL",
    "Lv17-Lv18/33_BoulderPoly_5K/BOU",
    "Lv17-Lv18/33_BoulderPoly_5K/ROA/0",
    "Lv17-Lv18/33_BoulderPoly_5K/ROA/1",
    "Lv17-Lv18/36_RailPoly_5K/UG, RTN; US, RTN",
    "Lv17-Lv18/36_RailPoly_5K/US, CPT",
    "Lv17-Lv18/36_RailPoly_5K/US, UPT",
    "Lv17-Lv18/38_RailLine_5K/US, MTR",
    "Lv17-Lv18/38_RailLine_5K/US, RPL; US, RTP",
    "Lv17-Lv18/38_RailLine_5K/US, TRM; US, PKT; US, LRT; US, CBC/0",
    "Lv17-Lv18/38_RailLine_5K/US, TRM; US, PKT; US, LRT; US, CBC/1",
    "Lv17-Lv18/48_RailLine_5K/UG, MTR",
    "Lv17-Lv18/8_RailLine_5K/AS, MTR",
    "Lv17-Lv18/8_RailLine_5K/AS, RPL",
    "Lv17-Lv18/9_RailPoly_5K/AS, CPT",
    "Lv19-Lv20/0_RailwayEntrance_5K:2",
    "Lv19-Lv20/9_CartoTransLine_1K/FY, E",
    "Lv19-Lv20/9_CartoTransLine_1K/FY, P",
    "Lv19-Lv20/9_CartoTransLine_1K/FYU, E",
    "Lv19-Lv20/9_CartoTransLine_1K/LR, E",
    "Lv19-Lv20/9_CartoTransLine_1K/LR, P/0",
    "Lv19-Lv20/9_CartoTransLine_1K/LR, P/1",
    "Lv19-Lv20/9_CartoTransLine_1K/MTR, E",
    "Lv19-Lv20/9_CartoTransLine_1K/MTR, P/0",
    "Lv19-Lv20/9_CartoTransLine_1K/MTR, P/1",
    "Lv19-Lv20/9_CartoTransLine_1K/NB, E/0",
    "Lv19-Lv20/9_CartoTransLine_1K/NB, E/1",
    "Lv19-Lv20/9_CartoTransLine_1K/PT, E",
    "Lv19-Lv20/9_CartoTransLine_1K/PT, P/0",
    "Lv19-Lv20/9_CartoTransLine_1K/PT, P/1",
    "Lv19-Lv20/9_CartoTransLine_1K/RM, E",
    "Lv19-Lv20/9_CartoTransLine_1K/RM, P",
    "Lv19-Lv20/9_CartoTransLine_1K/RMU, E",
    "Lv19-Lv20/9_CartoTransLine_1K/RP, E",
    "Lv19-Lv20/9_CartoTransLine_1K/RPU, E",
    "Lv19-Lv20/9_CartoTransLine_1K/TC, E",
    "Lv19-Lv20/9_CartoTransLine_1K/TUR, E",
    "Lv19-Lv20/9_CartoTransLine_1K/TUR, P",
    "Lv19-Lv20/9_CartoTransLine_1K/TW, E",
    "Lv19-Lv20/9_CartoTransLine_1K/TW, P/0",
    "Lv19-Lv20/9_CartoTransLine_1K/TW, P/1",
    "LV7-LV12/2_Railway/TSPTLINE_200K:11",
    "MTR_POINT",
    "RailwayEntrance",
  ],
  "Contour": [
    "Lv13/14_Elevation Polygon_TintLayer_50K/1000",
    "Lv13/14_Elevation Polygon_TintLayer_50K/200",
    "Lv13/14_Elevation Polygon_TintLayer_50K/300",
    "Lv13/14_Elevation Polygon_TintLayer_50K/400",
    "Lv13/14_Elevation Polygon_TintLayer_50K/500",
    "Lv13/14_Elevation Polygon_TintLayer_50K/600",
    "Lv13/14_Elevation Polygon_TintLayer_50K/700",
    "Lv13/14_Elevation Polygon_TintLayer_50K/800",
    "Lv13/14_Elevation Polygon_TintLayer_50K/900",
    "Lv14/17_Elevation Polygon_TintLayer_50K/1000",
    "Lv14/17_Elevation Polygon_TintLayer_50K/200",
    "Lv14/17_Elevation Polygon_TintLayer_50K/300",
    "Lv14/17_Elevation Polygon_TintLayer_50K/400",
    "Lv14/17_Elevation Polygon_TintLayer_50K/500",
    "Lv14/17_Elevation Polygon_TintLayer_50K/600",
    "Lv14/17_Elevation Polygon_TintLayer_50K/700",
    "Lv14/17_Elevation Polygon_TintLayer_50K/800",
    "Lv14/17_Elevation Polygon_TintLayer_50K/900",
    "Lv16/27_Elevation Polygon_TintLayer_10K/1000",
    "Lv16/27_Elevation Polygon_TintLayer_10K/200",
    "Lv16/27_Elevation Polygon_TintLayer_10K/300",
    "Lv16/27_Elevation Polygon_TintLayer_10K/400",
    "Lv16/27_Elevation Polygon_TintLayer_10K/500",
    "Lv16/27_Elevation Polygon_TintLayer_10K/600",
    "Lv16/27_Elevation Polygon_TintLayer_10K/700",
    "Lv16/27_Elevation Polygon_TintLayer_10K/800",
    "Lv16/27_Elevation Polygon_TintLayer_10K/900",
    "Lv17-Lv18/42_ContourLine_5K/CIS, 0-350",
    "Lv17-Lv18/42_ContourLine_5K/CIS, 700-950",
    "Lv17-Lv18/42_ContourLine_5K/CIS,400-650",
    "Lv17-Lv18/42_ContourLine_5K/label/Default",
    "Lv17-Lv18/45_ContourPoly_5K/100 m - 200 m; 50 m - 100 m; below 50 m",
    "Lv17-Lv18/45_ContourPoly_5K/200 m - 300 m",
    "Lv17-Lv18/45_ContourPoly_5K/300 m - 400 m",
    "Lv17-Lv18/45_ContourPoly_5K/400 m - 500 m",
    "Lv17-Lv18/45_ContourPoly_5K/500 m - 600 m",
    "Lv17-Lv18/45_ContourPoly_5K/600 m - 700 m",
    "Lv17-Lv18/45_ContourPoly_5K/700 m - 800 m",
    "Lv17-Lv18/45_ContourPoly_5K/800 m - 900 m",
    "Lv17-Lv18/45_ContourPoly_5K/above 900 m",
    "Lv19-Lv20/14_Contour_1K/>200-400/CIS",
    "Lv19-Lv20/14_Contour_1K/>200-400/CIU",
    "Lv19-Lv20/14_Contour_1K/>200-400/label/Default",
    "Lv19-Lv20/14_Contour_1K/>400-600/CIS",
    "Lv19-Lv20/14_Contour_1K/>400-600/CIU",
    "Lv19-Lv20/14_Contour_1K/>400-600/label/Default",
    "Lv19-Lv20/14_Contour_1K/>600-800/CIS",
    "Lv19-Lv20/14_Contour_1K/>600-800/CIU",
    "Lv19-Lv20/14_Contour_1K/>600-800/label/Default",
    "Lv19-Lv20/14_Contour_1K/>800/CIS",
    "Lv19-Lv20/14_Contour_1K/>800/CIU",
    "Lv19-Lv20/14_Contour_1K/>800/label/Default",
    "Lv19-Lv20/14_Contour_1K/0-200/CIS",
    "Lv19-Lv20/14_Contour_1K/0-200/CIU",
    "Lv19-Lv20/14_Contour_1K/0-200/label/Default",
    "Lv19-Lv20/42_ContourPoly_5K/100 m - 200 m; 50 m - 100 m; below 50 m",
    "Lv19-Lv20/42_ContourPoly_5K/200 m - 300 m",
    "Lv19-Lv20/42_ContourPoly_5K/300 m - 400 m",
    "Lv19-Lv20/42_ContourPoly_5K/400 m - 500 m",
    "Lv19-Lv20/42_ContourPoly_5K/500 m - 600 m",
    "Lv19-Lv20/42_ContourPoly_5K/600 m - 700 m",
    "Lv19-Lv20/42_ContourPoly_5K/700 m - 800 m",
    "Lv19-Lv20/42_ContourPoly_5K/800 m - 900 m",
    "Lv19-Lv20/42_ContourPoly_5K/above 900 m",
    "LV7-LV12/11_Elevation Polygon_TintLayer_50K /1000",
    "LV7-LV12/11_Elevation Polygon_TintLayer_50K /200",
    "LV7-LV12/11_Elevation Polygon_TintLayer_50K /300",
    "LV7-LV12/11_Elevation Polygon_TintLayer_50K /400",
    "LV7-LV12/11_Elevation Polygon_TintLayer_50K /500",
    "LV7-LV12/11_Elevation Polygon_TintLayer_50K /600",
    "LV7-LV12/11_Elevation Polygon_TintLayer_50K /700",
    "LV7-LV12/11_Elevation Polygon_TintLayer_50K /800",
    "LV7-LV12/11_Elevation Polygon_TintLayer_50K /900",
    "Lv13/18_ELEVPOLY_50K",
    "LV7-LV12/12_ELEVPOLY_200K",
    "Lv16/6_ELEVLINE_10K",
    "Lv15/5_ELEVLINE_10K",
    "Lv14/3_ELEVLINE_50K",
    "Lv15/5_ELEVLINE_10K/label/Default",
    "Lv16/6_ELEVLINE_10K/label/Default"
  ],
  "Facility": [
    "Lv13/11_FACIPOLY_50K/GCO",
    "Lv13/11_FACIPOLY_50K/PAR",
    "Lv13/11_FACIPOLY_50K/SGD",
    "Lv13/11_FACIPOLY_50K/SGT",
    "Lv13/11_FACIPOLY_50K/TNK",
    "Lv13/11_FACIPOLY_50K/WTK",
    "Lv14/14_FACIPOLY_50K/GCO",
    "Lv14/14_FACIPOLY_50K/PAR",
    "Lv14/14_FACIPOLY_50K/SGD",
    "Lv14/14_FACIPOLY_50K/SGT",
    "Lv14/14_FACIPOLY_50K/TNK",
    "Lv14/14_FACIPOLY_50K/WTK",
    "Lv15/12_FACIPOLY_10K/SPL",
    "Lv15/13_FACIPOLY_10K/CEM",
    "Lv15/17_FACIPOLY_10K:1/AVI",
    "Lv15/17_FACIPOLY_10K:1/GCO",
    "Lv15/17_FACIPOLY_10K:1/PAR",
    "Lv15/17_FACIPOLY_10K:1/SGD",
    "Lv15/17_FACIPOLY_10K:1/SGT",
    "Lv15/17_FACIPOLY_10K:1/TNK",
    "Lv15/17_FACIPOLY_10K:1/WTK",
    "Lv16/16_FACIPOLY_10K/SPL",
    "Lv16/17_FACIPOLY_10K:2/CEM",
    "Lv16/20_FACIPOLY_10K/AVI",
    "Lv16/20_FACIPOLY_10K/GCO",
    "Lv16/20_FACIPOLY_10K/PAR",
    "Lv16/20_FACIPOLY_10K/SGD",
    "Lv16/20_FACIPOLY_10K/SGT",
    "Lv16/20_FACIPOLY_10K/TNK",
    "Lv16/20_FACIPOLY_10K/WTK",
    "Lv16/21_FACIPOLY_10K/SGD",
    "Lv16/21_FACIPOLY_10K/SGT",
    "Lv16/21_FACIPOLY_10K/WTK; TNK; PAR; GCO; AVI",
    "Lv19-Lv20/38_Site_1K/Golf Course; Golf Centre; Park; Garden; Playground; Recreation Ground; Sitting-out Area; Rest Garden",
    "Lv19-Lv20/39_POIPoly_5K/OG, CEM; OG, GBU",
    "Lv19-Lv20/39_POIPoly_5K/OG, GCO",
    "Lv19-Lv20/39_POIPoly_5K/OG, PAR",
    "Lv19-Lv20/39_POIPoly_5K/OG, PLG",
    "Lv19-Lv20/39_POIPoly_5K/OG, RCO",
    "Lv19-Lv20/39_POIPoly_5K/OG, SGD",
    "Lv19-Lv20/39_POIPoly_5K/OG, SGT",
    "Lv19-Lv20/39_POIPoly_5K/OG, SPL",
    "Lv19-Lv20/39_POIPoly_5K/OG, STD",
    "Lv19-Lv20/39_POIPoly_5K/US, PLG",
    "Lv19-Lv20/39_POIPoly_5K/US, SGD"
  ],
  "Mainland": [
    "Lv19-Lv20/17_Mainland",
    "Lv17-Lv18/1_Mainland:4",
    "Lv16/1_Mainland:1",
    "Lv15/1_Mainland:2",
    "Lv14/1_Mainland:3",
    "Lv13/4_Mainland",
  ],
  "Water": [
    "2_HydroPolyMask/OG, STO; OG, CAT",
    "3_HydroPolyMask",
    "Lv13/13_HYDRPOLY_50K/BKW-1",
    "Lv13/13_HYDRPOLY_50K/PON-1",
    "Lv13/13_HYDRPOLY_50K/RES-1",
    "Lv13/13_HYDRPOLY_50K/STO-1",
    "Lv13/13_HYDRPOLY_50K/STO-3",
    "Lv13/19_HYDRPOLY_50K",
    "Lv14/16_HYDRPOLY_50K/BKW-1",
    "Lv14/16_HYDRPOLY_50K/PON-1",
    "Lv14/16_HYDRPOLY_50K/RES-1",
    "Lv14/16_HYDRPOLY_50K/STO-1",
    "Lv14/16_HYDRPOLY_50K/STO-3",
    "Lv15/19_HYDRPOLY_SRV_10K/SRV-1",
    "Lv15/19_HYDRPOLY_SRV_10K/SRV-2",
    "Lv15/21_HYDRPOLY_10K/BKW",
    "Lv15/21_HYDRPOLY_10K/PON",
    "Lv15/21_HYDRPOLY_10K/RES",
    "Lv15/21_HYDRPOLY_10K/RLE",
    "Lv15/23_HydrographyPoly_5K/OG, STO",
    "Lv15/24_HydrographyPoly_5K/OG, LAF",
    "Lv15/24_HydrographyPoly_5K/OG, SEF",
    "Lv16/25_HYDRPOLY_10K/SRV-1",
    "Lv16/25_HYDRPOLY_10K/SRV-2",
    "Lv16/26_HYDRPOLY_10K/BKW",
    "Lv16/26_HYDRPOLY_10K/PON",
    "Lv16/26_HYDRPOLY_10K/RES",
    "Lv16/26_HYDRPOLY_10K/RLE",
    "Lv16/28_HydrographyPoly_5K/OG, STO",
    "Lv16/29_HydrographyPoly_5K/OG, LAF",
    "Lv16/29_HydrographyPoly_5K/OG, SEF",
    "Lv16/3_HydrographyLine_5K/OG, STR",
    "Lv17-Lv18/16_HydrographyPoly_5K:1/AS, PON; AS, FOU",
    "Lv17-Lv18/28_HydrographyLine_5K/AS, STO; AS, SEW; OG, SEW",
    "Lv17-Lv18/28_HydrographyLine_5K/OG, RLE",
    "Lv17-Lv18/34_HydrographyLine_5K/OG, BOF",
    "Lv17-Lv18/34_HydrographyLine_5K/OG, HWM",
    "Lv17-Lv18/34_HydrographyLine_5K/OG, JET",
    "Lv17-Lv18/34_HydrographyLine_5K/OG, SLI",
    "Lv17-Lv18/34_HydrographyLine_5K/OG, STR",
    "Lv17-Lv18/34_HydrographyLine_5K/OG, WER",
    "Lv17-Lv18/35_HydrographyPoly_5K/OG, DAM/0",
    "Lv17-Lv18/35_HydrographyPoly_5K/OG, DAM/1",
    "Lv17-Lv18/35_HydrographyPoly_5K/OG, FOU; OG, PON",
    "Lv17-Lv18/35_HydrographyPoly_5K/OG, SRC",
    "Lv17-Lv18/35_HydrographyPoly_5K/OG, SRO; OG, STO; OG, FEB; OG, RES; OG, CAT",
    "Lv17-Lv18/35_HydrographyPoly_5K/OG, SRP",
    "Lv17-Lv18/46_HydrographyPoly_5K/OG, LAF",
    "Lv17-Lv18/46_HydrographyPoly_5K/OG, SEF",
    "Lv17-Lv18/49_HydrographyLine_5K/OG, CUF; OG, NRO; US, CAT; US, STO",
    "Lv17-Lv18/49_HydrographyLine_5K/US, BOF",
    "Lv19-Lv20/10_CartoHydroLine_1K/Catchwater",
    "Lv19-Lv20/10_CartoHydroLine_1K/Flow direction arrow/0",
    "Lv19-Lv20/10_CartoHydroLine_1K/Flow direction arrow/1",
    "Lv19-Lv20/10_CartoHydroLine_1K/High water mark; Lower limit of nullah side wall",
    "Lv19-Lv20/10_CartoHydroLine_1K/Rocky stream bed",
    "Lv19-Lv20/10_CartoHydroLine_1K/Seawall",
    "Lv19-Lv20/10_CartoHydroLine_1K/Small river; Stream; Drain shown with single line and flow direction/0",
    "Lv19-Lv20/10_CartoHydroLine_1K/Small river; Stream; Drain shown with single line and flow direction/1",
    "Lv19-Lv20/12_CartoReliefLine_1K/Cliff; Waterfall; Top limit of Quarry",
    "Lv19-Lv20/13_CartoReliefLine_1K/Cliff; Waterfall; Top limit of Quarry",
    "Lv19-Lv20/37_HydroPolygon_1K/BRE",
    "Lv19-Lv20/37_HydroPolygon_1K/CAP; CAT; CHA; CUL; DAM; MOA; NUL; PON; RES; RSB; SHA; SLU; WEI",
    "Lv19-Lv20/37_HydroPolygon_1K/RIV",
    "Lv19-Lv20/43_HydrographyPoly_5K/OG, LAF",
    "Lv19-Lv20/43_HydrographyPoly_5K/OG, SEF",
    "LV7-LV12/10_HYDRPOLY_200K/PON-1",
    "LV7-LV12/10_HYDRPOLY_200K/RES-1",
    "LV7-LV12/10_HYDRPOLY_200K/STO-1",
    "LV7-LV12/13_HYDRPOLY_Seafill_200K"
  ]
}

const initWidgets = function(mapView) {
  require([
    "esri/widgets/Track",
    "esri/widgets/Home",
    "esri/widgets/Compass",
  ], function(Track, Home, Compass) {
    const trackWidget = new Track({
      view: mapView,
    });
    const homeWidget = new Home({
      view: mapView,
    });
    const compass = new Compass({
      view: mapView,
    });

    mapView.ui.add(homeWidget, "top-left");
    mapView.ui.add(trackWidget, "top-left");
    mapView.ui.add(compass, "top-left");
  });
};
const initCustomStyle = function(styleLayerIds, vectorStyleJson, vectorLayer) {
  let custStyleGroup = "";
  for (let type in styleLayerIds) {
    let typeIdArr = styleLayerIds[type];
    custStyleGroup += `<tr><td>${type}</td>
        <td><input id="${type}" class="color-pick" type=color></input></td>
        <td><label class="switch"><input id="check_${type}" type="checkbox" checked=checked><span class="slider round"></span></label></td>
        </tr>`;
  }
  $("#customStyle").html(`<table>${custStyleGroup}</table>`);
};
const setStyleLayer = function(layer, styleLayerId, selectedColor) {
  const paintProperties = layer.getPaintProperties(styleLayerId);
  paintProperties["line-color"] = selectedColor;
  paintProperties["fill-color"] = selectedColor;
  layer.setPaintProperties(styleLayerId, paintProperties);
};
const enableStyleLayer = function(layer, styleLayerId, val) {
  layer.setStyleLayerVisibility(styleLayerId, val ? "visible" : "none");
};
const reset = async function(layer) {
  for (let type in styleLayerIds) {
    $(`#check_${type}`).prop("checked", true);
    $(`#${type}`).val("#000000");
  }
  return layer.loadStyle(`${basemapVTURL}?key=${apikey}`);
};
const exportStyle = function(layer, styleJson) {
  let exptStyle = layer.currentStyleInfo.style;
  for (var i in styleJson.layers) {
    const styleLayer = styleJson.layers[i];
    let paintProp = layer.getPaintProperties(styleLayer.id);
    if (paintProp) exptStyle.layers[i].paint = paintProp;
  }

  var element = document.createElement("a");
  element.setAttribute(
    "href",
    "data:text/plain;charset=utf-8," +
    encodeURIComponent(JSON.stringify(exptStyle, null, "\t"))
  );
  element.setAttribute("download", "style.json");
  element.style.display = "none";
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
};
const colorOpt = function(paintProp, colorOptFunc) {
  let colorType = [
    "line-color",
    "fill-color",
    "fill-outline-color",
    "icon-color",
    "text-color",
    "text-halo-color",
  ];
  for (let t of colorType) {
    if (paintProp[t]) paintProp[t] = colorOptFunc(paintProp[t]);
  }
  return paintProp;
};
const colorScale = function(colorType, color) {
  var matchColors = /#(\w{2})(\w{2})(\w{2})/;
  var match = matchColors.exec(color);
  if (match) {
    var r = parseInt(match[1], 16),
      g = parseInt(match[2], 16),
      b = parseInt(match[3], 16),
      val = Math.floor(0.2126 * r + 0.7152 * g + 0.0722 * b),
      h = val.toString(16).toUpperCase();

    switch (colorType) {
      case "grey":
        color = `#${h}${h}${h}`;
        break;
      case "red":
        color = `#${h}0000`;
        break;
      case "green":
        color = `#00${h}00`;
        break;
      case "blue":
        color = `#0000${h}`;
        break;
    }
  }
  return color;
};
const Grayscale = async function(layer, styleJson) {
  await reset(layer);
  for (var i in styleJson.layers) {
    const styleLayer = styleJson.layers[i];
    let paintProperties = layer.getPaintProperties(styleLayer.id);
    paintProperties = colorOpt(paintProperties, (color) => {
      return colorScale("grey", color);
    });
    layer.setPaintProperties(styleLayer.id, paintProperties);
  }
};
const RedScale = async function(layer, styleJson) {
  await reset(layer);
  for (var i in styleJson.layers) {
    const styleLayer = styleJson.layers[i];
    let paintProperties = layer.getPaintProperties(styleLayer.id);
    paintProperties = colorOpt(paintProperties, (color) => {
      return colorScale("red", color);
    });
    layer.setPaintProperties(styleLayer.id, paintProperties);
  }
};
const GreenScale = async function(layer, styleJson) {
  await reset(layer);
  for (var i in styleJson.layers) {
    const styleLayer = styleJson.layers[i];
    let paintProperties = layer.getPaintProperties(styleLayer.id);
    paintProperties = colorOpt(paintProperties, (color) => {
      return colorScale("green", color);
    });
    layer.setPaintProperties(styleLayer.id, paintProperties);
  }
};
const BlueScale = async function(layer, styleJson) {
  await reset(layer);
  for (var i in styleJson.layers) {
    const styleLayer = styleJson.layers[i];
    let paintProperties = layer.getPaintProperties(styleLayer.id);
    paintProperties = colorOpt(paintProperties, (color) => {
      return colorScale("blue", color);
    });
    layer.setPaintProperties(styleLayer.id, paintProperties);
  }
};
const Random = function(layer, styleJson) {
  for (i in styleJson.layers) {
    styleLayer = styleJson.layers[i];
    var randomColor = Math.floor(Math.random() * 16777215).toString(16);
    setStyleLayer(layer, styleLayer.id, `#${randomColor}`);
  }
};
const load = function(layer, url) {
  $("#load_msg").text("Loading..");
  fetch(url)
    .then((response) => response.json())
    .then(async function(data) {
      await layer.loadStyle(url);
      for (let type in styleLayerIds) {
        $(`#check_${type}`).prop("checked", true);
        $(`#${type}`).val("#000000");
      }
      $("#load_msg").text("");
    })
    .catch((error) => {
      $("#load_msg").text("Error");
    });
};


require([
  "esri/Map", "esri/Basemap", "esri/layers/VectorTileLayer",
  "esri/views/MapView", "esri/config",
  "esri/geometry/Point",
], function(Map, Basemap, VectorTileLayer,
  MapView, esriConfig, Point
) {
  esriConfig.request.interceptors.push({
    before: function(params) {
      if (params.url.indexOf("api.hkmapservice.gov.hk") >= 0) {
        if (params.requestOptions.query) {
          params.requestOptions.query.key = apikey
        } else {
          params.requestOptions.query = {
            key: apikey
          }
        }
      }
    },
    after: function(response) {
      if (!response.ssl) {
        response.ssl = true;
      }
    }
  });

  const vectorLayer = new VectorTileLayer(basemapVTURL);
  const labelTc = new VectorTileLayer(labels[1]);
  const basemap = new Basemap({
    baseLayers: [
      vectorLayer
    ]
  });
  const map = new Map({
    basemap: basemap,
  });
  //map.add(labelTc);

  const mView = new MapView({
    container: "viewDiv",
    map: map,
    zoom: 10,
    center: new Point(114.12, 22.35)
  });


  initWidgets(mView);

  const enableLayer = function(event) {
    for (var idx in labels) {
      let lblId = labels[idx].id;
      if (lblId == event.target.id && event.target.checked)
        map.add(new VectorTileLayer(labels[idx]));
      else {
        document.getElementById(lblId).checked = false;
        let layer = map.findLayerById(lblId);
        if (layer)
          map.remove(layer);
      }

    }
  }
  for (var idx in labels) {
    let lblId = labels[idx].id;
    document.getElementById(lblId).addEventListener("click", enableLayer);
  }



  vectorLayer.when(
    () => {
      vectorStyleJson = vectorLayer.currentStyleInfo.style;
    }
  );
  initCustomStyle(styleLayerIds);


  for (let type in styleLayerIds) {
    $(`#${type}`).on("input", () => {
      for (i in vectorStyleJson.layers) {
        styleLayer = vectorStyleJson.layers[i];
        if (styleLayerIds[type].includes(styleLayer.id)) {
          setStyleLayer(vectorLayer, styleLayer.id, event.target.value);
        }
      }
    });
    $(`#check_${type}`).on("click", (event) => {
      for (i in vectorStyleJson.layers) {
        styleLayer = vectorStyleJson.layers[i];
        if (styleLayerIds[type].includes(styleLayer.id)) {
          enableStyleLayer(vectorLayer, styleLayer.id, $(event.target).prop("checked"));
        }
      }
    });
  }

  $("#Grayscale").on("click", (event) => {
    Grayscale(vectorLayer, vectorStyleJson)
  });
  $("#RedScale").on("click", (event) => {
    RedScale(vectorLayer, vectorStyleJson)
  });
  $("#GreenScale").on("click", (event) => {
    GreenScale(vectorLayer, vectorStyleJson)
  });
  $("#BlueScale").on("click", (event) => {
    BlueScale(vectorLayer, vectorStyleJson)
  });
  $("#Random").on("click", (event) => {
    Random(vectorLayer, vectorStyleJson)
  });
  $("#resetStyle").on("click", () => {
    reset(vectorLayer);
  });
  $("#exportStyle").on("click", (event) => {
    exportStyle(vectorLayer, vectorStyleJson)
  });
  $("#load").on("click", (event) => {
    url = decodeURIComponent($("#styleLink").val());
    load(vectorLayer, url);
  });
  
  $("#rightPane").draggable();
});
